// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model refresh_tokens {
  id            Int    @id @default(autoincrement())
  refresh_token String @db.VarChar(300)
  user_id       Int
  user          user   @relation(fields: [user_id], references: [id])
}

model user {
  id                     Int                      @id @default(autoincrement())
  username               String?
  normalized_username    String?
  email                  String?                  @unique
  password               String
  email_confirmed        Boolean?                 @default(false)
  security_stamp         String?
  concurrency_stamp      String
  phone_number           String?                  @unique
  phone_number_confirmed Boolean?
  lockout_end            DateTime?
  two_factor_enabled     Boolean?                 @default(false)
  lockout_enabled        Boolean?
  access_failed_count    Int                      @default(0)
  first_login            Boolean?
  code                   Int
  role                   role?                    @relation(fields: [roleId], references: [id])
  roleId                 Int?
  deleted_status         Int                      @default(0)
  refresh_tokens         refresh_tokens[]
  journal_users          journal_users[]
  general_journal_header general_journal_header[]
  journal_comment        journal_comment[]
}

model privilege {
  id                Int     @id @default(autoincrement())
  action            String  @unique
  description       String?
  concurrency_stamp String  @default("random")
  roles             role[]  @relation(references: [id])
  deleted_status    Int     @default(0)
}

model role {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  concurrency_stamp String
  description       String?
  privileges        privilege[] @relation(references: [id])
  users             user[]
  deleted_status    Int         @default(0)
}

model Client {
  id                 Int       @id @default(autoincrement())
  name               String
  tradeName          String    @unique
  address            String
  city               String?
  tel                String    @unique
  tinNumber          String    @unique
  subCity            String?
  woreda             String?
  contactPersonName  String
  contactPersonPhone String    @unique
  contactPersonEmail String    @unique
  email              String    @unique
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime  @default(now())
  createdBy          String
  revisionDate       DateTime  @updatedAt
  revisedBy          String
  status             Int       @default(0)
  isProtectedForEdit Boolean   @default(false)
  project            project[]

  invoice_tracking invoice_tracking[]
  @@map(name: "client")
}

model equipment {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime             @default(now())
  createdBy          String
  revisionDate       DateTime             @updatedAt
  revisedBy          String
  status             Int                  @default(0)
  isProtectedForEdit Boolean              @default(false)
  required_equipment required_equipment[]
}

model evaluation {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
}

model instruction {
  id                            Int                            @id @default(autoincrement())
  name                          String                         @unique
  description                   String?
  startDate                     DateTime
  endDate                       DateTime
  creationDate                  DateTime                       @default(now())
  createdBy                     String
  revisionDate                  DateTime                       @updatedAt
  revisedBy                     String
  status                        Int                            @default(0)
  isProtectedForEdit            Boolean                        @default(false)
  instructions_given_on_project instruction_given_on_project[]
}

model manpower {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  description           String?
  startDate             DateTime
  endDate               DateTime
  creationDate          DateTime               @default(now())
  createdBy             String
  revisionDate          DateTime               @updatedAt
  revisedBy             String
  status                Int                    @default(0)
  isProtectedForEdit    Boolean                @default(false)
  manpower_requirements manpower_requirement[]
  weather_data          weather_data[]
}

model material_category {
  id                 Int        @id @default(autoincrement())
  name               String     @unique
  description        String?
  materials          material[]
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime   @default(now())
  createdBy          String
  revisionDate       DateTime   @updatedAt
  revisedBy          String
  status             Int        @default(0)
  isProtectedForEdit Boolean    @default(false)
}

model material {
  id                   Int                 @id @default(autoincrement())
  name                 String              @unique
  description          String?
  unit                 String
  material_category    material_category   @relation(fields: [material_category_id], references: [id])
  material_category_id Int
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime            @default(now())
  createdBy            String
  revisionDate         DateTime            @updatedAt
  revisedBy            String
  status               Int                 @default(0)
  isProtectedForEdit   Boolean             @default(false)
  required_material    required_material[]
}

model phase {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
}

model priority {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  description        String?
  color              String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime      @default(now())
  createdBy          String
  revisionDate       DateTime      @updatedAt
  revisedBy          String
  status             Int           @default(0)
  isProtectedForEdit Boolean       @default(false)
  simple_task        simple_task[]
  todos              todos[]
  request            request[]
}

model work_category {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @unique
  description                 String?
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime                      @default(now())
  createdBy                   String
  revisionDate                DateTime                      @updatedAt
  revisedBy                   String
  status                      Int                           @default(0)
  isProtectedForEdit          Boolean                       @default(false)
  risk_tracking               risk_tracking[]
  work_log_and_branch_of_work work_log_and_branch_of_work[]
}

model document_category {
  id                 Int             @id @default(autoincrement())
  name               String          @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime        @default(now())
  createdBy          String
  revisionDate       DateTime        @updatedAt
  revisedBy          String
  status             Int             @default(0)
  isProtectedForEdit Boolean         @default(false)
  documentation      documentation[]
}

model documentation {
  id                   Int                 @id @default(autoincrement())
  name                 String              @unique
  description          String?
  document_category_id Int
  document_category    document_category   @relation(fields: [document_category_id], references: [id])
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime            @default(now())
  createdBy            String
  revisionDate         DateTime            @updatedAt
  revisedBy            String
  status               Int                 @default(0)
  isProtectedForEdit   Boolean             @default(false)
  required_document    required_document[]
}

model project {
  id                           Int                            @id @default(autoincrement())
  name                         String
  project_manager              String
  project_start_date           DateTime
  project_end_date             DateTime
  project_description          String?
  project_id                   String                         @unique
  contract_number              String
  site_engineer                String
  dupty_manager                String
  project_address              String
  client                       Client                         @relation(fields: [client_id], references: [id])
  client_id                    Int
  startDate                    DateTime
  endDate                      DateTime
  creationDate                 DateTime                       @default(now())
  createdBy                    String
  revisionDate                 DateTime                       @updatedAt
  revisedBy                    String
  status                       Int                            @default(0)
  isProtectedForEdit           Boolean                        @default(false)
  daily_work_log               daily_work_log[]
  instruction_given_on_project instruction_given_on_project[]
  manpower_requirement         manpower_requirement[]
  required_equipment           required_equipment[]
  required_material            required_material[]
  risk_tracking                risk_tracking[]
  task_manager                 task_manager[]
  simple_task                  simple_task[]
  weather_data                 weather_data[]
  todos                        todos[]
  request                      request[]
  required_document            required_document[]
}

model daily_work_log {
  id                          Int                           @id @default(autoincrement())
  weather                     String
  day                         String
  temprature                  String
  time                        String
  name_of_employee            String
  contact                     String
  cell_phone                  String
  contract_no                 String
  location                    String
  date                        DateTime
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime                      @default(now())
  createdBy                   String
  revisionDate                DateTime                      @updatedAt
  revisedBy                   String
  status                      Int                           @default(0)
  isProtectedForEdit          Boolean                       @default(false)
  project                     project                       @relation(fields: [project_id], references: [id])
  project_id                  Int
  work_log_and_branch_of_work work_log_and_branch_of_work[]
}

model instruction_given_on_project {
  id                 Int         @id @default(autoincrement())
  yes_no             Boolean
  remarks            String?
  date               DateTime
  project_id         Int
  instruction_id     Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime    @default(now())
  createdBy          String
  revisionDate       DateTime    @updatedAt
  revisedBy          String
  status             Int         @default(0)
  isProtectedForEdit Boolean     @default(false)
  project            project     @relation(fields: [project_id], references: [id])
  instruction        instruction @relation(fields: [instruction_id], references: [id])
}

model manpower_requirement {
  id                          Int      @id @default(autoincrement())
  number_of_planned_man_power Int
  number_of_actual_man_power  Int?
  food_expense                Float
  wage                        Float
  house_rent                  Float
  transportation              Float
  total_expense               Float
  remark                      String?
  manpower_id                 Int
  project_id                  Int
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime @default(now())
  createdBy                   String
  revisionDate                DateTime @updatedAt
  revisedBy                   String
  status                      Int      @default(0)
  isProtectedForEdit          Boolean  @default(false)
  manpower                    manpower @relation(fields: [manpower_id], references: [id])
  project                     project  @relation(fields: [project_id], references: [id])
}

model required_equipment {
  id                       Int       @id @default(autoincrement())
  planned_equipment_number Int
  actual_equipment_number  Int?
  equipment_lifetime       String
  expense                  Float
  house_rent               Float
  transportation           Float
  total_expense            Float
  remark                   String?
  equipment_id             Int
  project_id               Int
  startDate                DateTime
  endDate                  DateTime
  creationDate             DateTime  @default(now())
  createdBy                String
  revisionDate             DateTime  @updatedAt
  revisedBy                String
  status                   Int       @default(0)
  isProtectedForEdit       Boolean   @default(false)
  equipment                equipment @relation(fields: [equipment_id], references: [id])
  project                  project   @relation(fields: [project_id], references: [id])
}

model required_material {
  id                     Int       @id @default(autoincrement())
  planned_quantity       Float
  planned_unit_price     Float
  planned_total_amount   Float
  delivered_quantity     Float?
  delivered_unit_price   Float?
  delivered_total_amount Float?
  total_expense          Float?
  remark                 String?
  delivery_date          DateTime?
  material_id            Int
  project_id             Int
  startDate              DateTime
  endDate                DateTime
  creationDate           DateTime  @default(now())
  createdBy              String
  revisionDate           DateTime  @updatedAt
  revisedBy              String
  status                 Int       @default(0)
  isProtectedForEdit     Boolean   @default(false)
  material               material  @relation(fields: [material_id], references: [id])
  project                project   @relation(fields: [project_id], references: [id])
}

model risk_tracking {
  id                 Int           @id @default(autoincrement())
  description        String?
  impact             String
  risk_response      String?
  risk_level         String
  risk_owner         String
  remark             String?
  work_category_id   Int
  project_id         Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime      @default(now())
  createdBy          String
  revisionDate       DateTime      @updatedAt
  revisedBy          String
  status             Int           @default(0)
  isProtectedForEdit Boolean       @default(false)
  work_category      work_category @relation(fields: [work_category_id], references: [id])
  project            project       @relation(fields: [project_id], references: [id])
}

model task_manager {
  id                 Int        @id @default(autoincrement())
  name               String
  description        String?
  task_start_date    String
  task_end_date      String?
  duration_in_days   String
  working_days       String
  project_id         Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime   @default(now())
  createdBy          String
  revisionDate       DateTime   @updatedAt
  revisedBy          String
  status             Int        @default(0)
  isProtectedForEdit Boolean    @default(false)
  project            project    @relation(fields: [project_id], references: [id])
  sub_task           sub_task[]
}

model sub_task {
  id                 Int          @id @default(autoincrement())
  description        String?
  name               String
  task_start_date    DateTime
  task_end_date      DateTime?
  duration_in_days   Int
  working_days       Int
  task_manager_id    Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime     @default(now())
  createdBy          String
  revisionDate       DateTime     @updatedAt
  revisedBy          String
  status             Int          @default(0)
  isProtectedForEdit Boolean      @default(false)
  task_manager       task_manager @relation(fields: [task_manager_id], references: [id])
}

model simple_task {
  id                   Int       @id @default(autoincrement())
  note                 String
  name                 String
  task_start_date      DateTime
  task_end_date        DateTime?
  completed_percentage Float     @default(0)
  estimated_hours      Float
  project_id           Int
  priority_id          Int
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime  @default(now())
  createdBy            String
  revisionDate         DateTime  @updatedAt
  revisedBy            String
  status               Int       @default(0)
  isProtectedForEdit   Boolean   @default(false)
  project              project   @relation(fields: [project_id], references: [id])
  priority             priority  @relation(fields: [priority_id], references: [id])
}

model work_log_and_branch_of_work {
  id                 Int            @id @default(autoincrement())
  skilled_worker     Int
  hours              Float
  date               DateTime
  work_category_id   Int
  daily_work_log_id  Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime       @default(now())
  createdBy          String
  revisionDate       DateTime       @updatedAt
  revisedBy          String
  status             Int            @default(0)
  isProtectedForEdit Boolean        @default(false)
  work_category      work_category  @relation(fields: [work_category_id], references: [id])
  daily_work_log     daily_work_log @relation(fields: [daily_work_log_id], references: [id])
}

model weather_data {
  id                    Int      @id @default(autoincrement())
  total_lost_hour       Float
  duration_of_lost_hour Float
  date                  DateTime
  reason                String?
  reference             String
  project_id            Int
  manpower_id           Int
  startDate             DateTime
  endDate               DateTime
  creationDate          DateTime @default(now())
  createdBy             String
  revisionDate          DateTime @updatedAt
  revisedBy             String
  status                Int      @default(0)
  isProtectedForEdit    Boolean  @default(false)
  project               project  @relation(fields: [project_id], references: [id])
  manpower              manpower @relation(fields: [manpower_id], references: [id])
}

model todos {
  id                 Int      @id @default(autoincrement())
  notes              String
  name               String
  date               String
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  project_id         Int
  priority_id        Int
  project            project  @relation(fields: [project_id], references: [id])
  priority           priority @relation(fields: [priority_id], references: [id])
}

model request {
  id                  Int       @id @default(autoincrement())
  RFI_no              String
  current_status      String
  request_description String?
  request_by          String
  assigned_to         String
  date_requested      DateTime
  date_required       DateTime?
  date_responded      DateTime?
  notes               String
  project_id          Int
  priority_id         Int
  startDate           DateTime
  endDate             DateTime
  creationDate        DateTime  @default(now())
  createdBy           String
  revisionDate        DateTime  @updatedAt
  revisedBy           String
  status              Int       @default(0)
  isProtectedForEdit  Boolean   @default(false)
  project             project   @relation(fields: [project_id], references: [id])
  priority            priority  @relation(fields: [priority_id], references: [id])
}

model invoice_tracking {
  id                 Int      @id @default(autoincrement())
  detail             String?
  amount             Float
  amount_received    Float
  balance            Float
  invoice_number     String   @unique
  date_received      DateTime
  notes              String
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  client_id          Int
  client             Client   @relation(fields: [client_id], references: [id])

}

model required_document {
  id                 Int           @id @default(autoincrement())
  spec_reference     String
  requested_by       String
  quantity_needed    Int
  date_requested     DateTime
  date_needed        DateTime
  assigned_to        String
  received           String?
  received_date      DateTime?
  location           String
  documentation_id   Int
  project_id         Int
  project            project       @relation(fields: [project_id], references: [id])
  documentation      documentation @relation(fields: [documentation_id], references: [id])
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime      @default(now())
  createdBy          String
  revisionDate       DateTime      @updatedAt
  revisedBy          String
  status             Int           @default(0)
  isProtectedForEdit Boolean       @default(false)
}

model currency {
  startDate              DateTime
  endDate                DateTime
  creationDate           DateTime                 @default(now())
  createdBy              String
  revisionDate           DateTime                 @updatedAt
  revisedBy              String
  status                 Int                      @default(0)
  isProtectedForEdit     Boolean                  @default(false)
  id                     Int                      @id @default(autoincrement())
  currency_code          String
  currency_description   String
  name                   String
  symbol                 String
  price_precision        Int
  currency_format        Int
  is_base_currency       Boolean
  bank                   bank[]
  exchange_rate          exchange_rate[]
  financial_settings     financial_settings[]
  chart_of_account       chart_of_account[]
  contact                contact[]
  general_journal_header general_journal_header[]
  general_ledger         general_ledger[]
  asset                  asset[]
}

model account_category {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime       @default(now())
  createdBy          String
  revisionDate       DateTime       @updatedAt
  revisedBy          String
  status             Int            @default(0)
  isProtectedForEdit Boolean        @default(false)
  id                 Int            @id @default(autoincrement())
  code               String
  description        String?
  is_debit           String?
  account_type       account_type[]
}

model closing_note {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  closing_type       Int //[both,month_end,year_end]
  title              String
  note               String?
  consideration      Int //[closing_note,closing_effect]
}

model financial_statement_section {
  startDate                                DateTime
  endDate                                  DateTime
  creationDate                             DateTime                                   @default(now())
  createdBy                                String
  revisionDate                             DateTime                                   @updatedAt
  revisedBy                                String
  status                                   Int                                        @default(0)
  isProtectedForEdit                       Boolean                                    @default(false)
  id                                       Int                                        @id @default(autoincrement())
  name                                     String
  description                              String?
  sequence_on_report                       Int
  financial_statement_type                 Int //[income_statement,balance_sheet,cash_flow_statement,owners_equity]
  account_type_financial_statement_section account_type_financial_statement_section[]
}

model cost_center {
  startDate              DateTime
  endDate                DateTime
  creationDate           DateTime                 @default(now())
  createdBy              String
  revisionDate           DateTime                 @updatedAt
  revisedBy              String
  status                 Int                      @default(0)
  isProtectedForEdit     Boolean                  @default(false)
  id                     Int                      @id @default(autoincrement())
  cost_center_code       String
  section_name           String?
  remark                 String?
  cost_center_accounts   cost_center_accounts[]
  budget                 budget[]
  general_journal_detail general_journal_detail[]
}

model payment_term {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime  @default(now())
  createdBy          String
  revisionDate       DateTime  @updatedAt
  revisedBy          String
  status             Int       @default(0)
  isProtectedForEdit Boolean   @default(false)
  id                 Int       @id @default(autoincrement())
  show_it_as         String?
  number_of_days     Int?
  contact            contact[]
}

model date_format_type {
  startDate                 DateTime
  endDate                   DateTime
  creationDate              DateTime             @default(now())
  createdBy                 String
  revisionDate              DateTime             @updatedAt
  revisedBy                 String
  status                    Int                  @default(0)
  isProtectedForEdit        Boolean              @default(false)
  id                        Int                  @id @default(autoincrement())
  date_format               String
  date_format_type_category Int //[short,medium,long]
  financial_settings        financial_settings[]
}

model industry {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  name               String
  description        String?
}

model foot_note {
  startDate                DateTime
  endDate                  DateTime
  creationDate             DateTime @default(now())
  createdBy                String
  revisionDate             DateTime @updatedAt
  revisedBy                String
  status                   Int      @default(0)
  isProtectedForEdit       Boolean  @default(false)
  id                       Int      @id @default(autoincrement())
  title                    String
  description              String?
  financial_statement_type Int? //[income_statement,balance_sheet,cash_flow_statement,owners_equity]
}

model tax_authority {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  name               String
  description        String?
  tax                tax[]
}

model tax_exemption {
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime @default(now())
  createdBy            String
  revisionDate         DateTime @updatedAt
  revisedBy            String
  status               Int      @default(0)
  isProtectedForEdit   Boolean  @default(false)
  id                   Int      @id @default(autoincrement())
  tax_exemption_reason String?
  code                 String
  description          String?
  tax_exemption_type   Int //[customer,item]
}

model tax_group {
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime               @default(now())
  createdBy            String
  revisionDate         DateTime               @updatedAt
  revisedBy            String
  status               Int                    @default(0)
  isProtectedForEdit   Boolean                @default(false)
  id                   Int                    @id @default(autoincrement())
  tax_group_name       String
  tax_group_percentage Float
  associated_tax_group associated_tax_group[]
  general_ledger       general_ledger[]
}

// model transaction_type {
//   id          Int     @id @default(autoincrement())
//   type        Int //[Matched,Manually_Added,Categorized,Reconciled,Unreconciled]
//   description String?
// }

model accounting_period {
  startDate                 DateTime
  endDate                   DateTime
  creationDate              DateTime @default(now())
  createdBy                 String
  revisionDate              DateTime @updatedAt
  revisedBy                 String
  status                    Int      @default(0)
  isProtectedForEdit        Boolean  @default(false)
  id                        Int      @id @default(autoincrement())
  months                    Int //[january,february,march,april,may,june,july,augest,september,october,november,december,other]
  period_number             Int
  accounting_period_status  Int //[open,closed,future,access_locked]
  is_current_posting_period Boolean
  is_year_end_closing       Boolean
  period_starting_date      DateTime
  period_ending_date        DateTime
}

model journal_type {
  startDate              DateTime
  endDate                DateTime
  creationDate           DateTime                 @default(now())
  createdBy              String
  revisionDate           DateTime                 @updatedAt
  revisedBy              String
  status                 Int                      @default(0)
  isProtectedForEdit     Boolean                  @default(false)
  id                     Int                      @id @default(autoincrement())
  type                   String
  description            String?
  general_journal_header general_journal_header[]
}

model country {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime          @default(now())
  createdBy          String
  revisionDate       DateTime          @updatedAt
  revisedBy          String
  status             Int               @default(0)
  isProtectedForEdit Boolean           @default(false)
  id                 Int               @id @default(autoincrement())
  country_code       String
  country_name       String
  contact_address    contact_address[]
}

model title {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime         @default(now())
  createdBy          String
  revisionDate       DateTime         @updatedAt
  revisedBy          String
  status             Int              @default(0)
  isProtectedForEdit Boolean          @default(false)
  id                 Int              @id @default(autoincrement())
  short_code         String
  name               String
  contact_person     contact_person[]
}

model language {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime             @default(now())
  createdBy          String
  revisionDate       DateTime             @updatedAt
  revisedBy          String
  status             Int                  @default(0)
  isProtectedForEdit Boolean              @default(false)
  id                 Int                  @id @default(autoincrement())
  code               String
  name               String
  financial_settings financial_settings[]
}

model account_type {
  startDate                                DateTime
  endDate                                  DateTime
  creationDate                             DateTime                                   @default(now())
  createdBy                                String
  revisionDate                             DateTime                                   @updatedAt
  revisedBy                                String
  status                                   Int                                        @default(0)
  isProtectedForEdit                       Boolean                                    @default(false)
  id                                       Int                                        @id @default(autoincrement())
  code                                     String
  type                                     String
  description                              String?
  can_be_sub_account                       Boolean?
  contain_account_number                   Boolean?
  contain_currency                         Boolean?
  tool_tip_description                     String?
  can_have_more_than_one_chart_of_account  Boolean?
  account_category_id                      Int
  account_category                         account_category                           @relation(fields: [account_category_id], references: [id])
  //needs account_category
  //inside schema
  chart_of_account                         chart_of_account[]
  account_type_financial_statement_section account_type_financial_statement_section[]
}

model bank {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  account_type       Int //[bank,credit_card]
  account_name       String
  account_number     String?
  account_code       String?
  IBAN               String?
  bank_name          String?
  description        String?
  is_primary         Boolean?
  currency_id        Int
  currency           currency @relation(fields: [currency_id], references: [id])
  //needs currency
  //inside schema
}

model exchange_rate {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  rate               Float
  date               DateTime
  currency_id        Int
  currency           currency @relation(fields: [currency_id], references: [id])
  //needs currency
  //inside schema
}

model financial_settings {
  startDate                        DateTime
  endDate                          DateTime
  creationDate                     DateTime          @default(now())
  createdBy                        String
  revisionDate                     DateTime          @updatedAt
  revisedBy                        String
  status                           Int               @default(0)
  isProtectedForEdit               Boolean           @default(false)
  id                               Int               @id @default(autoincrement())
  report_basis                     Int //[accrual,cash,both]
  fiscal_year                      Int //[january_december,february_january,march_february,april_march,may_april,june_may,july_june,august_july,september_august,october_september,november_october,december_november]
  closing_type                     Int //[both,month_end,year_end]
  timezone                         String?
  company_id                       Int? //[ACN,BN,CN,CPR,CVR,DIW,KT,ORG,SEC,company_id]
  tax_id                           Int? //[ABN,BN,CST,ORG,TAX,VST,tax_id]
  tax_id_number                    String?
  auto_generate_journal_preference Boolean?
  is_acc_code_mandatory            Boolean?
  enter_unique_acc_code            Boolean?
  is_profile_tax_applied           Boolean?
  is_legal_reserve_applied         Boolean?
  profit_tax                       Float?
  legal_reserve                    Float?
  company_id_number                String?
  time_format_id                   Int?
  language_id                      Int?
  base_currency_id                 Int
  base_currency                    currency          @relation(fields: [base_currency_id], references: [id])
  time_format                      date_format_type? @relation(fields: [time_format_id], references: [id])
  language                         language?         @relation(fields: [language_id], references: [id])
  //needs currency
  //needs date_format_type
  //needs language
  //inside schema
  company_address                  company_address[]
  primary_contact                  primary_contact[]
}

model journal_users {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  access_name        Int? //[manual_journal,recurring_journal]
  user_id            Int?
  user               user?    @relation(fields: [user_id], references: [id])
  //needs user
  //inside schema
}

model chart_of_account {
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime                 @default(now())
  createdBy                   String
  revisionDate                DateTime                 @updatedAt
  revisedBy                   String
  status                      Int                      @default(0)
  isProtectedForEdit          Boolean                  @default(false)
  id                          Int                      @id @default(autoincrement())
  account_name                String
  account_code                String                   @unique
  account_number              String?
  is_active                   Boolean?
  description                 String?
  add_to_dashboard_watch_list Boolean?
  attachment_path             Int?
  is_sub_account              Boolean?
  is_default                  Boolean?
  is_employee_account         Boolean?
  has_opening_balance         Boolean?
  is_bank_account             Boolean?
  parent_account_id           Int?
  head_account_id             Int?
  currency_id                 Int?
  account_type_id             Int
  account_type                account_type             @relation(fields: [account_type_id], references: [id])
  currency                    currency?                @relation(fields: [currency_id], references: [id])
  parent_account              chart_of_account?        @relation(name: "parent_account", fields: [parent_account_id], references: [id])
  head_account                chart_of_account?        @relation(name: "head_account", fields: [head_account_id], references: [id])
  //needs account_type
  //needs currency
  //needs chart_of_account
  parent_accounts             chart_of_account[]       @relation("parent_account")
  head_accounts               chart_of_account[]       @relation("head_account")
  contact                     contact[]
  cost_center_accounts        cost_center_accounts[]
  tax_debits                  tax[]                    @relation("chart_of_account_debit")
  tax_credits                 tax[]                    @relation("chart_of_account_credit")
  // tax_chart_of_account        tax_chart_of_account[]
  bank_reconcilation          bank_reconcilation[]
  chart_of_account_files      chart_of_account_files[]
  budget_account              budget_account[]
  general_ledger              general_ledger[]
  asset_depreciation          asset[]                  @relation("depreciation_account")
  asset_accounts              asset[]                  @relation("asset_account")
  general_journal_detail      general_journal_detail[]
}

model contact {
  startDate              DateTime
  endDate                DateTime
  creationDate           DateTime                 @default(now())
  createdBy              String
  revisionDate           DateTime                 @updatedAt
  revisedBy              String
  status                 Int                      @default(0)
  isProtectedForEdit     Boolean                  @default(false)
  id                     Int                      @id @default(autoincrement())
  contact_type           Int //[customer,vendor]
  company_name           String
  contact_display_name   String
  remark                 String?
  chart_of_account_id    Int?
  currency_id            Int?
  payment_term_id        Int?
  chart_of_account       chart_of_account?        @relation(fields: [chart_of_account_id], references: [id])
  currency               currency?                @relation(fields: [currency_id], references: [id])
  payment_term           payment_term?            @relation(fields: [payment_term_id], references: [id])
  //needs chart_of_account
  //needs currency
  //needs payment_term
  contact_address        contact_address[]
  contact_person         contact_person[]
  journal_comment        journal_comment[]
  general_journal_detail general_journal_detail[]
}

model cost_center_accounts {
  startDate           DateTime
  endDate             DateTime
  creationDate        DateTime         @default(now())
  createdBy           String
  revisionDate        DateTime         @updatedAt
  revisedBy           String
  status              Int              @default(0)
  isProtectedForEdit  Boolean          @default(false)
  id                  Int              @id @default(autoincrement())
  remark              String?
  chart_of_account_id Int
  cost_center_id      Int
  cost_center         cost_center      @relation(fields: [cost_center_id], references: [id])
  chart_of_account    chart_of_account @relation(fields: [chart_of_account_id], references: [id])
  //needs cost_center
  //needs chart_of_account
}

model company_address {
  startDate               DateTime
  endDate                 DateTime
  creationDate            DateTime           @default(now())
  createdBy               String
  revisionDate            DateTime           @updatedAt
  revisedBy               String
  status                  Int                @default(0)
  isProtectedForEdit      Boolean            @default(false)
  id                      Int                @id @default(autoincrement())
  address1                String //only this required(from address data)
  address2                String?
  city                    String?
  state_or_province       String?
  zip_or_portal_code      String?
  phone                   String?
  fax                     String?
  website                 String?
  organization_profile_id Int
  organization_profile    financial_settings @relation(fields: [organization_profile_id], references: [id])
  //needs financial_settings
}

model associated_tax_group {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime  @default(now())
  createdBy          String
  revisionDate       DateTime  @updatedAt
  revisedBy          String
  status             Int       @default(0)
  isProtectedForEdit Boolean   @default(false)
  id                 Int       @id @default(autoincrement())
  tax_id             Int
  tax_group_id       Int
  tax                tax       @relation(fields: [tax_id], references: [id])
  tax_group          tax_group @relation(fields: [tax_group_id], references: [id])
}

model tax {
  startDate                  DateTime
  endDate                    DateTime
  creationDate               DateTime          @default(now())
  createdBy                  String
  revisionDate               DateTime          @updatedAt
  revisedBy                  String
  status                     Int               @default(0)
  isProtectedForEdit         Boolean           @default(false)
  id                         Int               @id @default(autoincrement())
  tax_name                   String
  tax_percentage             Float
  is_value_added             Boolean?
  is_editable                Boolean?
  is_default_tax             Boolean?
  tax_type                   Int? //[tax,compound_tax]
  chart_of_account_debit_id  Int?
  chart_of_account_credit_id Int?
  tax_authority_id           Int
  tax_authority              tax_authority     @relation(fields: [tax_authority_id], references: [id])
  chart_of_account_debit     chart_of_account? @relation(name: "chart_of_account_debit", fields: [chart_of_account_debit_id], references: [id])
  chart_of_account_credit    chart_of_account? @relation(name: "chart_of_account_credit", fields: [chart_of_account_credit_id], references: [id])

  //needs tax_authority
  //needs chart_of_account
  associated_tax_group   associated_tax_group[]
  // tax_chart_of_account tax_chart_of_account[]
  tax_rule               tax_rule[]
  general_ledger         general_ledger[]
  general_journal_detail general_journal_detail[]
}

model tax_rule {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  operator           Int //[greater_than,less_than,equals_to,greater_than_or_equals_to,less_than_equals_to]
  amount             Float
  remark             String?
  sales_type         Int? //[product,service]
  tax_id             Int
  tax                tax      @relation(fields: [tax_id], references: [id])

  //needs tax
}

model contact_address {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  address_type       Int //[billing_address,shipping_address]
  attention          String?
  street1            String?
  street2            String?
  city               String?
  state              String?
  phone              String?
  fax                String?
  zip_code           String?
  contact_id         Int?
  country_id         Int?
  contact            contact? @relation(fields: [contact_id], references: [id])
  country            country? @relation(fields: [country_id], references: [id])
  //needs contact
  //needs country
}

model contact_person {
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  id                 Int      @id @default(autoincrement())
  first_name         String
  last_name          String?
  work_phone         String?
  mobile             String?
  email              String?
  designation        String?
  department         String?
  is_primary_contact Boolean?
  contact_id         Int?
  title_id           Int?
  contact            contact? @relation(fields: [contact_id], references: [id])
  title              title?   @relation(fields: [title_id], references: [id])

  //needs contact
  //needs title
}

model primary_contact {
  startDate               DateTime
  endDate                 DateTime
  creationDate            DateTime            @default(now())
  createdBy               String
  revisionDate            DateTime            @updatedAt
  revisedBy               String
  status                  Int                 @default(0)
  isProtectedForEdit      Boolean             @default(false)
  id                      Int                 @id @default(autoincrement())
  name                    String
  email                   String
  organization_profile_id Int?
  organization_profile    financial_settings? @relation(fields: [organization_profile_id], references: [id])
  //needs financial_settings
}

model account_type_financial_statement_section {
  id                             Int                         @id @default(autoincrement())
  account_type_id                Int
  financial_statement_section_id Int
  account_type                   account_type                @relation(fields: [account_type_id], references: [id])
  financial_statement_section    financial_statement_section @relation(fields: [financial_statement_section_id], references: [id])
  //needs account_type
  //needs financial_statement_section
}

model bank_reconcilation {
  id                  Int              @id @default(autoincrement())
  from_date           DateTime?
  to_date             DateTime?
  closing_amount      Float?
  chart_of_account_id Int
  chart_of_account    chart_of_account @relation(fields: [chart_of_account_id], references: [id])

  //needs chart_of_account
  reconcilation_transaction reconcilation_transaction[]
}

model chart_of_account_files {
  id                  Int              @id @default(autoincrement())
  path                String //needs file care
  name                String?
  type                String?
  chart_of_account_id Int
  chart_of_account    chart_of_account @relation(fields: [chart_of_account_id], references: [id])
  //needs chart_of_account
}

model estimated_total_production_unit {
  id          Int     @id @default(autoincrement())
  unit_name   String
  unit_symbol String
  //needs no one
  asset       asset[]
}

model recurring_journal_occurrence {
  id                        Int                         @id @default(autoincrement())
  repeat_every_number       Int?
  repeat_every_label        Int
  name                      String
  //needs no one
  asset                     asset[]
  recurring_general_journal recurring_general_journal[]
}

model budget {
  id             Int              @id @default(autoincrement())
  name           String?
  fiscal_year    DateTime         @default(now())
  budget_reason  Int
  project_name   String?
  cost_center_id Int?
  cost_center    cost_center?     @relation(fields: [cost_center_id], references: [id])
  //needs cost center
  budget_account budget_account[]
}

model budget_account {
  id                    Int                     @id @default(autoincrement())
  budget_total_amount   Float
  budget_id             Int?
  chart_of_account_id   Int?
  budget                budget?                 @relation(fields: [budget_id], references: [id])
  chart_of_account      chart_of_account?       @relation(fields: [chart_of_account_id], references: [id])
  //needs budget
  //needs cost_center
  budget_account_period budget_account_period[]
}

model budget_account_period {
  id                Int             @id @default(autoincrement())
  budget_amount     Float
  period_month      Int
  budget_account_id Int?
  budget_account    budget_account? @relation(fields: [budget_account_id], references: [id])
  //needs budget_account
}

model budget_control_action {
  id                                         Int @id @default(autoincrement())
  type                                       Int
  action_accumulated_monthly_budget_exceeded Int
  //needs no one
}

model general_journal_header {
  id                           Int                        @id @default(autoincrement())
  journal_date                 DateTime
  posting_reference            String                     @unique //needs its own implementation  ( sequential string
  reference_number             String?
  journal_status               Int?
  notes                        String
  report_basis                 Int?
  journal_source               Int?
  journal_posting_status       Int?
  journal_type_reference       String?
  total_amount                 Float?
  journal_type_id              Int?
  recurring_general_journal_id Int?
  currency_id                  Int
  posting_responsible_user_id  Int
  journal_type                 journal_type?              @relation(fields: [journal_type_id], references: [id])
  recurring_general_journal    recurring_general_journal? @relation(fields: [recurring_general_journal_id], references: [id])
  currency                     currency                   @relation(fields: [currency_id], references: [id])
  posting_responsible_user     user                       @relation(fields: [posting_responsible_user_id], references: [id])

  //needs journal_type
  //needs recurring_general_journal
  //needs currency
  //needs user
  general_ledger         general_ledger[]
  journal_comment        journal_comment[]
  general_journal_detail general_journal_detail[]
  general_journal_files  general_journal_files[]
}

model general_ledger {
  id                        Int                         @id @default(autoincrement())
  amount_credit             Float?
  amount_debit              Float?
  ledger_status             Int?
  posting_reference         String                      @unique //needs its own implementation  ( sequential string
  group_posting_reference   String                      @unique //needs its own implementation  ( sequential string
  description               String?
  journal_date              DateTime //this is in the allowed unlocked transaction
  posting_date              DateTime                    @default(now())
  currency_id               Int
  tax_id                    Int?
  tax_group_id              Int?
  general_journal_header_id Int?
  chart_of_account_id       Int
  currency                  currency                    @relation(fields: [currency_id], references: [id])
  tax                       tax?                        @relation(fields: [tax_id], references: [id])
  tax_group                 tax_group?                  @relation(fields: [tax_group_id], references: [id])
  general_journal_header    general_journal_header?     @relation(fields: [general_journal_header_id], references: [id])
  chart_of_account          chart_of_account            @relation(fields: [chart_of_account_id], references: [id])
  //needs currency
  //needs tax
  //needs group_tax
  //needs general_journal_header
  //needs chart_of_account
  reconcilation_transaction reconcilation_transaction[]
}

model journal_comment {
  id                           Int                        @id @default(autoincrement())
  commented_date               DateTime                   @default(now())
  comment                      String
  application_user_id          Int
  contact_id                   Int?
  general_journal_header_id    Int?
  recurring_general_journal_id Int?
  application_user             user                       @relation(fields: [application_user_id], references: [id])
  contact                      contact?                   @relation(fields: [contact_id], references: [id])
  general_journal_header       general_journal_header?    @relation(fields: [general_journal_header_id], references: [id])
  recurring_general_journal    recurring_general_journal? @relation(fields: [recurring_general_journal_id], references: [id])

  //needs user
  //needs contact
  //needs general_journal_header
  //needs recurring_journal
}

model number_tracker {
  Id              Int     @id @default(autoincrement())
  prefix          String?
  starting_number Int
  next_number     Int
  reason          Int?
}

model transaction_lock {
  id                         Int      @id @default(autoincrement())
  lock_date                  DateTime
  reason                     String
  enable_transaction_locking Boolean?
}

model opening_balance {
  id                   Int      @id @default(autoincrement())
  opening_balance_date DateTime
  price_precision      Int?
  amount               Float?
  month                Int
}

model reconcilation_transaction {
  id                    Int                @id @default(autoincrement())
  bank_reconcilation_id Int
  general_ledger_id     Int
  general_ledger        general_ledger     @relation(fields: [general_ledger_id], references: [id])
  bank_reconcilation    bank_reconcilation @relation(fields: [bank_reconcilation_id], references: [id])
  //needs general_ledger
  //needs bank_reconcilation
}

model asset {
  id                                 Int                              @id @default(autoincrement())
  name                               String
  tag_number                         String
  acquisition_date                   DateTime?
  description                        String
  economic_value                     Float
  depreciation_methods               Int
  useful_life                        DateTime
  current_value                      Float
  asset_type                         Int
  asset_status                       Int?
  estimated_total_production         Float?
  scrap_value                        Float
  estimated_total_production_unit_id Int?
  currency_id                        Int
  asset_account_id                   Int
  depreciation_account_id            Int
  recurring_journal_occurrence_id    Int?
  estimated_total_production_unit    estimated_total_production_unit? @relation(fields: [estimated_total_production_unit_id], references: [id])
  currency                           currency                         @relation(fields: [currency_id], references: [id])
  depreciation_account               chart_of_account                 @relation(name: "depreciation_account", fields: [depreciation_account_id], references: [id])
  asset_account                      chart_of_account                 @relation(name: "asset_account", fields: [asset_account_id], references: [id])
  recurring_journal_occurrence       recurring_journal_occurrence?    @relation(fields: [recurring_journal_occurrence_id], references: [id])
  //needs estimated_total_production_unit
  //needs currency
  //needs chart_of_account
  //needs recurring_journal_occurrence
  recurring_general_journal          recurring_general_journal[]
}

model general_journal_detail {
  id                        Int                    @id @default(autoincrement())
  description               String?
  debit_or_credit           Int
  tax_group_id              Int?
  amount_credit             Float?
  posting_reference         String                 @unique //needs its own implementation  ( sequential string
  reference_code            String
  amount_debit              Float?
  tax_id                    Int?
  contact_id                Int?
  general_journal_header_id Int
  cost_center_id            Int
  chart_of_account_id       Int
  tax                       tax?                   @relation(fields: [tax_id], references: [id])
  contact                   contact?               @relation(fields: [contact_id], references: [id])
  general_journal_header    general_journal_header @relation(fields: [general_journal_header_id], references: [id])
  cost_center               cost_center            @relation(fields: [cost_center_id], references: [id])
  chart_of_account          chart_of_account       @relation(fields: [chart_of_account_id], references: [id])
  //needs tax
  //needs contact
  //needs general_journal_header
  //needs cost_center
  //needs chart_of_account
}

model general_journal_files {
  id                        Int                    @id @default(autoincrement())
  path                      String //needs file care
  name                      String?
  type                      String?
  general_journal_header_id Int
  general_journal_header    general_journal_header @relation(fields: [general_journal_header_id], references: [id])
  //needs general_journal_header
}

model recurring_general_journal {
  id                               Int                           @id @default(autoincrement())
  profile_name                     String
  start_on                         DateTime?
  end_on                           DateTime?
  never_expires                    Boolean?
  depreciable_value                Float?
  recurring_general_journal_status Int?
  asset_id                         Int?
  recurring_journal_occurrence_id  Int?
  asset                            asset?                        @relation(fields: [asset_id], references: [id])
  recurring_journal_occurrence     recurring_journal_occurrence? @relation(fields: [recurring_journal_occurrence_id], references: [id])
  //needs asset
  //needs recurring_journal_occurrence
  general_journal_header           general_journal_header[]
  journal_comment                  journal_comment[]
}
