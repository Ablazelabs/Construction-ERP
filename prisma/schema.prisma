// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model refresh_tokens {
  id            Int    @id @default(autoincrement())
  refresh_token String @db.VarChar(300)
  user_id       Int
  user          user   @relation(fields: [user_id], references: [id])
}

model user {
  id                     Int              @id @default(autoincrement())
  username               String?
  normalized_username    String?
  email                  String?          @unique
  password               String
  email_confirmed        Boolean?         @default(false)
  security_stamp         String?
  concurrency_stamp      String
  phone_number           String?          @unique
  phone_number_confirmed Boolean?
  lockout_end            DateTime?
  two_factor_enabled     Boolean?         @default(false)
  lockout_enabled        Boolean?
  access_failed_count    Int              @default(0)
  first_login            Boolean?
  code                   Int
  role                   role?            @relation(fields: [roleId], references: [id])
  roleId                 Int?
  deleted_status         Int              @default(0)
  refresh_tokens         refresh_tokens[]
  journal_users          journal_users[]
}

model privilege {
  id                Int     @id @default(autoincrement())
  action            String  @unique
  description       String?
  concurrency_stamp String  @default("random")
  roles             role[]  @relation(references: [id])
  deleted_status    Int     @default(0)
}

model role {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  concurrency_stamp String
  description       String?
  privileges        privilege[] @relation(references: [id])
  users             user[]
  deleted_status    Int         @default(0)
}

model Client {
  id                 Int       @id @default(autoincrement())
  name               String
  tradeName          String    @unique
  address            String
  city               String?
  tel                String    @unique
  tinNumber          String    @unique
  subCity            String?
  woreda             String?
  contactPersonName  String
  contactPersonPhone String    @unique
  contactPersonEmail String    @unique
  email              String    @unique
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime  @default(now())
  createdBy          String
  revisionDate       DateTime  @updatedAt
  revisedBy          String
  status             Int       @default(0)
  isProtectedForEdit Boolean   @default(false)
  project            project[]

  invoice_tracking invoice_tracking[]
  @@map(name: "client")
}

model equipment {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime             @default(now())
  createdBy          String
  revisionDate       DateTime             @updatedAt
  revisedBy          String
  status             Int                  @default(0)
  isProtectedForEdit Boolean              @default(false)
  required_equipment required_equipment[]
}

model evaluation {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
}

model instruction {
  id                            Int                            @id @default(autoincrement())
  name                          String                         @unique
  description                   String?
  startDate                     DateTime
  endDate                       DateTime
  creationDate                  DateTime                       @default(now())
  createdBy                     String
  revisionDate                  DateTime                       @updatedAt
  revisedBy                     String
  status                        Int                            @default(0)
  isProtectedForEdit            Boolean                        @default(false)
  instructions_given_on_project instruction_given_on_project[]
}

model manpower {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  description           String?
  startDate             DateTime
  endDate               DateTime
  creationDate          DateTime               @default(now())
  createdBy             String
  revisionDate          DateTime               @updatedAt
  revisedBy             String
  status                Int                    @default(0)
  isProtectedForEdit    Boolean                @default(false)
  manpower_requirements manpower_requirement[]
  weather_data          weather_data[]
}

model material_category {
  id                 Int        @id @default(autoincrement())
  name               String     @unique
  description        String?
  materials          material[]
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime   @default(now())
  createdBy          String
  revisionDate       DateTime   @updatedAt
  revisedBy          String
  status             Int        @default(0)
  isProtectedForEdit Boolean    @default(false)
}

model material {
  id                   Int                 @id @default(autoincrement())
  name                 String              @unique
  description          String?
  unit                 String
  material_category    material_category   @relation(fields: [material_category_id], references: [id])
  material_category_id Int
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime            @default(now())
  createdBy            String
  revisionDate         DateTime            @updatedAt
  revisedBy            String
  status               Int                 @default(0)
  isProtectedForEdit   Boolean             @default(false)
  required_material    required_material[]
}

model phase {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
}

model priority {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  description        String?
  color              String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime      @default(now())
  createdBy          String
  revisionDate       DateTime      @updatedAt
  revisedBy          String
  status             Int           @default(0)
  isProtectedForEdit Boolean       @default(false)
  simple_task        simple_task[]
  todos              todos[]
  request            request[]
}

model work_category {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @unique
  description                 String?
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime                      @default(now())
  createdBy                   String
  revisionDate                DateTime                      @updatedAt
  revisedBy                   String
  status                      Int                           @default(0)
  isProtectedForEdit          Boolean                       @default(false)
  risk_tracking               risk_tracking[]
  work_log_and_branch_of_work work_log_and_branch_of_work[]
}

model document_category {
  id                 Int             @id @default(autoincrement())
  name               String          @unique
  description        String?
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime        @default(now())
  createdBy          String
  revisionDate       DateTime        @updatedAt
  revisedBy          String
  status             Int             @default(0)
  isProtectedForEdit Boolean         @default(false)
  documentation      documentation[]
}

model documentation {
  id                   Int                 @id @default(autoincrement())
  name                 String              @unique
  description          String?
  document_category_id Int
  document_category    document_category   @relation(fields: [document_category_id], references: [id])
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime            @default(now())
  createdBy            String
  revisionDate         DateTime            @updatedAt
  revisedBy            String
  status               Int                 @default(0)
  isProtectedForEdit   Boolean             @default(false)
  required_document    required_document[]
}

model project {
  id                           Int                            @id @default(autoincrement())
  name                         String
  project_manager              String
  project_start_date           DateTime
  project_end_date             DateTime
  project_description          String?
  project_id                   String                         @unique
  contract_number              String
  site_engineer                String
  dupty_manager                String
  project_address              String
  client                       Client                         @relation(fields: [client_id], references: [id])
  client_id                    Int
  startDate                    DateTime
  endDate                      DateTime
  creationDate                 DateTime                       @default(now())
  createdBy                    String
  revisionDate                 DateTime                       @updatedAt
  revisedBy                    String
  status                       Int                            @default(0)
  isProtectedForEdit           Boolean                        @default(false)
  daily_work_log               daily_work_log[]
  instruction_given_on_project instruction_given_on_project[]
  manpower_requirement         manpower_requirement[]
  required_equipment           required_equipment[]
  required_material            required_material[]
  risk_tracking                risk_tracking[]
  task_manager                 task_manager[]
  simple_task                  simple_task[]
  weather_data                 weather_data[]
  todos                        todos[]
  request                      request[]
  required_document            required_document[]
}

model daily_work_log {
  id                          Int                           @id @default(autoincrement())
  weather                     String
  day                         String
  temprature                  String
  time                        String
  name_of_employee            String
  contact                     String
  cell_phone                  String
  contract_no                 String
  location                    String
  date                        DateTime
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime                      @default(now())
  createdBy                   String
  revisionDate                DateTime                      @updatedAt
  revisedBy                   String
  status                      Int                           @default(0)
  isProtectedForEdit          Boolean                       @default(false)
  project                     project                       @relation(fields: [project_id], references: [id])
  project_id                  Int
  work_log_and_branch_of_work work_log_and_branch_of_work[]
}

model instruction_given_on_project {
  id                 Int         @id @default(autoincrement())
  yes_no             Boolean
  remarks            String?
  date               DateTime
  project_id         Int
  instruction_id     Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime    @default(now())
  createdBy          String
  revisionDate       DateTime    @updatedAt
  revisedBy          String
  status             Int         @default(0)
  isProtectedForEdit Boolean     @default(false)
  project            project     @relation(fields: [project_id], references: [id])
  instruction        instruction @relation(fields: [instruction_id], references: [id])
}

model manpower_requirement {
  id                          Int      @id @default(autoincrement())
  number_of_planned_man_power Int
  number_of_actual_man_power  Int?
  food_expense                Float
  wage                        Float
  house_rent                  Float
  transportation              Float
  total_expense               Float
  remark                      String?
  manpower_id                 Int
  project_id                  Int
  startDate                   DateTime
  endDate                     DateTime
  creationDate                DateTime @default(now())
  createdBy                   String
  revisionDate                DateTime @updatedAt
  revisedBy                   String
  status                      Int      @default(0)
  isProtectedForEdit          Boolean  @default(false)
  manpower                    manpower @relation(fields: [manpower_id], references: [id])
  project                     project  @relation(fields: [project_id], references: [id])
}

model required_equipment {
  id                       Int       @id @default(autoincrement())
  planned_equipment_number Int
  actual_equipment_number  Int?
  equipment_lifetime       String
  expense                  Float
  house_rent               Float
  transportation           Float
  total_expense            Float
  remark                   String?
  equipment_id             Int
  project_id               Int
  startDate                DateTime
  endDate                  DateTime
  creationDate             DateTime  @default(now())
  createdBy                String
  revisionDate             DateTime  @updatedAt
  revisedBy                String
  status                   Int       @default(0)
  isProtectedForEdit       Boolean   @default(false)
  equipment                equipment @relation(fields: [equipment_id], references: [id])
  project                  project   @relation(fields: [project_id], references: [id])
}

model required_material {
  id                     Int       @id @default(autoincrement())
  planned_quantity       Float
  planned_unit_price     Float
  planned_total_amount   Float
  delivered_quantity     Float?
  delivered_unit_price   Float?
  delivered_total_amount Float?
  total_expense          Float?
  remark                 String?
  delivery_date          DateTime?
  material_id            Int
  project_id             Int
  startDate              DateTime
  endDate                DateTime
  creationDate           DateTime  @default(now())
  createdBy              String
  revisionDate           DateTime  @updatedAt
  revisedBy              String
  status                 Int       @default(0)
  isProtectedForEdit     Boolean   @default(false)
  material               material  @relation(fields: [material_id], references: [id])
  project                project   @relation(fields: [project_id], references: [id])
}

model risk_tracking {
  id                 Int           @id @default(autoincrement())
  description        String?
  impact             String
  risk_response      String?
  risk_level         String
  risk_owner         String
  remark             String?
  work_category_id   Int
  project_id         Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime      @default(now())
  createdBy          String
  revisionDate       DateTime      @updatedAt
  revisedBy          String
  status             Int           @default(0)
  isProtectedForEdit Boolean       @default(false)
  work_category      work_category @relation(fields: [work_category_id], references: [id])
  project            project       @relation(fields: [project_id], references: [id])
}

model task_manager {
  id                 Int        @id @default(autoincrement())
  name               String
  description        String?
  task_start_date    String
  task_end_date      String?
  duration_in_days   String
  working_days       String
  project_id         Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime   @default(now())
  createdBy          String
  revisionDate       DateTime   @updatedAt
  revisedBy          String
  status             Int        @default(0)
  isProtectedForEdit Boolean    @default(false)
  project            project    @relation(fields: [project_id], references: [id])
  sub_task           sub_task[]
}

model sub_task {
  id                 Int          @id @default(autoincrement())
  description        String?
  name               String
  task_start_date    DateTime
  task_end_date      DateTime?
  duration_in_days   Int
  working_days       Int
  task_manager_id    Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime     @default(now())
  createdBy          String
  revisionDate       DateTime     @updatedAt
  revisedBy          String
  status             Int          @default(0)
  isProtectedForEdit Boolean      @default(false)
  task_manager       task_manager @relation(fields: [task_manager_id], references: [id])
}

model simple_task {
  id                   Int       @id @default(autoincrement())
  note                 String
  name                 String
  task_start_date      DateTime
  task_end_date        DateTime?
  completed_percentage Float     @default(0)
  estimated_hours      Float
  project_id           Int
  priority_id          Int
  startDate            DateTime
  endDate              DateTime
  creationDate         DateTime  @default(now())
  createdBy            String
  revisionDate         DateTime  @updatedAt
  revisedBy            String
  status               Int       @default(0)
  isProtectedForEdit   Boolean   @default(false)
  project              project   @relation(fields: [project_id], references: [id])
  priority             priority  @relation(fields: [priority_id], references: [id])
}

model work_log_and_branch_of_work {
  id                 Int            @id @default(autoincrement())
  skilled_worker     Int
  hours              Float
  date               DateTime
  work_category_id   Int
  daily_work_log_id  Int
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime       @default(now())
  createdBy          String
  revisionDate       DateTime       @updatedAt
  revisedBy          String
  status             Int            @default(0)
  isProtectedForEdit Boolean        @default(false)
  work_category      work_category  @relation(fields: [work_category_id], references: [id])
  daily_work_log     daily_work_log @relation(fields: [daily_work_log_id], references: [id])
}

model weather_data {
  id                    Int      @id @default(autoincrement())
  total_lost_hour       Float
  duration_of_lost_hour Float
  date                  DateTime
  reason                String?
  reference             String
  project_id            Int
  manpower_id           Int
  startDate             DateTime
  endDate               DateTime
  creationDate          DateTime @default(now())
  createdBy             String
  revisionDate          DateTime @updatedAt
  revisedBy             String
  status                Int      @default(0)
  isProtectedForEdit    Boolean  @default(false)
  project               project  @relation(fields: [project_id], references: [id])
  manpower              manpower @relation(fields: [manpower_id], references: [id])
}

model todos {
  id                 Int      @id @default(autoincrement())
  notes              String
  name               String
  date               String
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  project_id         Int
  priority_id        Int
  project            project  @relation(fields: [project_id], references: [id])
  priority           priority @relation(fields: [priority_id], references: [id])
}

model request {
  id                  Int       @id @default(autoincrement())
  RFI_no              String
  current_status      String
  request_description String?
  request_by          String
  assigned_to         String
  date_requested      DateTime
  date_required       DateTime?
  date_responded      DateTime?
  notes               String
  project_id          Int
  priority_id         Int
  startDate           DateTime
  endDate             DateTime
  creationDate        DateTime  @default(now())
  createdBy           String
  revisionDate        DateTime  @updatedAt
  revisedBy           String
  status              Int       @default(0)
  isProtectedForEdit  Boolean   @default(false)
  project             project   @relation(fields: [project_id], references: [id])
  priority            priority  @relation(fields: [priority_id], references: [id])
}

model invoice_tracking {
  id                 Int      @id @default(autoincrement())
  detail             String?
  amount             Float
  amount_received    Float
  balance            Float
  invoice_number     String   @unique
  date_received      DateTime
  notes              String
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime @default(now())
  createdBy          String
  revisionDate       DateTime @updatedAt
  revisedBy          String
  status             Int      @default(0)
  isProtectedForEdit Boolean  @default(false)
  client_id          Int
  client             Client   @relation(fields: [client_id], references: [id])

}

model required_document {
  id                 Int           @id @default(autoincrement())
  spec_reference     String
  requested_by       String
  quantity_needed    Int
  date_requested     DateTime
  date_needed        DateTime
  assigned_to        String
  received           String?
  received_date      DateTime?
  location           String
  documentation_id   Int
  project_id         Int
  project            project       @relation(fields: [project_id], references: [id])
  documentation      documentation @relation(fields: [documentation_id], references: [id])
  startDate          DateTime
  endDate            DateTime
  creationDate       DateTime      @default(now())
  createdBy          String
  revisionDate       DateTime      @updatedAt
  revisedBy          String
  status             Int           @default(0)
  isProtectedForEdit Boolean       @default(false)
}

model currency {
  id                   Int                  @id @default(autoincrement())
  currency_code        String
  currency_description String
  name                 String
  symbol               String
  price_precision      Int
  currency_format      Int
  is_base_currency     Boolean
  bank                 bank[]
  exchange_rate        exchange_rate[]
  financial_settings   financial_settings[]
  chart_of_account     chart_of_account[]
  contact              contact[]
}

model account_category {
  id           Int            @id @default(autoincrement())
  code         String
  description  String?
  is_debit     String?
  account_type account_type[]
}

model closing_note {
  id            Int     @id @default(autoincrement())
  closing_type  Int //[both,month_end,year_end]
  title         String
  note          String?
  consideration Int //[closing_note,closing_effect]
}

model financial_statement_section {
  id                       Int     @id @default(autoincrement())
  name                     String
  description              String?
  sequence_on_report       Int
  financial_statement_type Int //[income_statement,balance_sheet,cash_flow_statement,owners_equity]
}

model cost_center {
  id                   Int                    @id @default(autoincrement())
  cost_center_code     String
  section_name         String?
  remark               String?
  cost_center_accounts cost_center_accounts[]
}

model payment_term {
  id             Int       @id @default(autoincrement())
  show_it_as     String
  number_of_days Int
  contact        contact[]
}

model date_format_type {
  id                        Int                  @id @default(autoincrement())
  date_format               String
  date_format_type_category Int //[short,medium,long]
  financial_settings        financial_settings[]
}

model industry {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
}

model foot_note {
  id                       Int     @id @default(autoincrement())
  title                    String
  description              String?
  financial_statement_type Int //[income_statement,balance_sheet,cash_flow_statement,owners_equity]
}

model tax_authority {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  tax         tax[]
}

model tax_exemption {
  id                   Int     @id @default(autoincrement())
  tax_exemption_reason String?
  code                 String
  description          String?
  tax_exemption_type   Int //[customer,item]
}

model tax_group {
  id                   Int                    @id @default(autoincrement())
  tax_group_name       String
  tax_group_percentage Float
  associated_tax_group associated_tax_group[]
}

model transaction_type {
  id          Int     @id @default(autoincrement())
  type        Int //[Matched,Manually_Added,Categorized,Reconciled,Unreconciled]
  description String?
}

model accounting_period {
  id                        Int      @id @default(autoincrement())
  months                    Int //[january,february,march,april,may,june,july,augest,september,october,november,december,other]
  period_number             Int
  status                    Int //[open,closed,future,access_locked]
  is_current_posting_period Boolean
  is_year_end_closing       Boolean
  period_starting_date      DateTime
  period_ending_date        DateTime
}

model journal_type {
  id          Int     @id @default(autoincrement())
  type        String
  description String?
}

model country {
  id           Int    @id @default(autoincrement())
  country_code String
  country_name String
}

model title {
  id         Int    @id @default(autoincrement())
  short_code String
  name       String
}

model language {
  id                 Int                  @id @default(autoincrement())
  code               String
  name               String
  financial_settings financial_settings[]
}

model account_type {
  id                                      Int                @id @default(autoincrement())
  code                                    String
  type                                    String
  description                             String?
  can_be_sub_account                      Boolean?
  contain_account_number                  Boolean?
  contain_currency                        Boolean?
  tool_tip_description                    String?
  can_have_more_than_one_chart_of_account Boolean?
  account_category_id                     Int
  account_category                        account_category   @relation(fields: [account_category_id], references: [id])
  //needs account_category
  //inside schema
  chart_of_account                        chart_of_account[]
}

model bank {
  id             Int      @id @default(autoincrement())
  account_type   Int //[bank,credit_card]
  account_name   String
  account_number String
  account_code   String
  IBAN           String
  bank_name      String
  description    String
  is_primary     Boolean
  currency_id    Int
  currency       currency @relation(fields: [currency_id], references: [id])
  //needs currency
  //inside schema
}

model exchange_rate {
  id          Int      @id @default(autoincrement())
  rate        Float
  date        DateTime
  currency_id Int
  currency    currency @relation(fields: [currency_id], references: [id])
  //needs currency
  //inside schema
}

model financial_settings {
  id                               Int               @id @default(autoincrement())
  report_basis                     Int //[accrual,cash,both]
  fiscal_year                      Int //[january_december,february_january,march_february,april_march,may_april,june_may,july_june,august_july,september_august,october_september,november_october,december_november]
  closing_type                     Int //[both,month_end,year_end]
  timezone                         String
  company_id                       Int //[ACN,BN,CN,CPR,CVR,DIW,KT,ORG,SEC,company_id]
  tax_id                           Int //[ABN,BN,CST,ORG,TAX,VST,tax_id]
  auto_generate_journal_preference Boolean
  is_acc_code_mandatory            Boolean
  enter_unique_acc_code            Boolean
  is_profile_tax_applied           Boolean
  is_legal_reserve_applied         Boolean
  profit_tax                       Float
  legal_reserve                    Float
  company_id_number                String
  time_format_id                   Int
  language_id                      Int
  base_currency_id                 Int
  currency                         currency          @relation(fields: [base_currency_id], references: [id])
  time_format                      date_format_type  @relation(fields: [time_format_id], references: [id])
  language                         language          @relation(fields: [language_id], references: [id])
  //needs currency
  //needs date_format_type
  //needs language
  //inside schema
  company_address                  company_address[]
}

model journal_users {
  id          Int  @id @default(autoincrement())
  access_name Int //[manual_journal,recurring_journal]
  user_id     Int
  user        user @relation(fields: [user_id], references: [id])
  //needs user
  //inside schema
}

model chart_of_account {
  id                          Int                    @id @default(autoincrement())
  account_name                String?
  account_code                String?
  account_number              String?
  is_active                   Boolean?
  description                 String?
  add_to_dashboard_watch_list Boolean?
  attachment_path             Int?
  is_sub_account              Boolean?
  is_default                  Boolean?
  is_employee_account         Boolean?
  has_opening_balance         Boolean?
  is_bank_account             Boolean?
  parent_account_id           Int?
  head_account_id             Int?
  currency_id                 Int
  account_type_id             Int
  account_type                account_type           @relation(fields: [account_type_id], references: [id])
  currency                    currency               @relation(fields: [currency_id], references: [id])
  parent_account              chart_of_account?      @relation(name: "parent_account", fields: [parent_account_id], references: [id])
  head_account                chart_of_account?      @relation(name: "head_account", fields: [head_account_id], references: [id])
  //needs account_type
  //needs currency
  //needs chart_of_account
  parent_accounts             chart_of_account[]     @relation("parent_account")
  head_accounts               chart_of_account[]     @relation("head_account")
  contact                     contact[]
  cost_center_accounts        cost_center_accounts[]
  tax_debits                  tax[]                  @relation("chart_of_account_debit")
  tax_credits                 tax[]                  @relation("chart_of_account_credit")
  tax_chart_of_account        tax_chart_of_account[]
}

model contact {
  id                   Int              @id @default(autoincrement())
  contact_type         Int //[customer,vendor]
  company_name         String
  contact_display_name String
  remark               String
  chart_of_account_id  Int
  currency_id          Int
  payment_term_id      Int
  chart_of_account     chart_of_account @relation(fields: [chart_of_account_id], references: [id])
  currency             currency         @relation(fields: [currency_id], references: [id])
  payment_term         payment_term     @relation(fields: [payment_term_id], references: [id])
  //needs chart_of_account
  //needs currency
  //needs payment_term
}

model cost_center_accounts {
  id                  Int              @id @default(autoincrement())
  remark              String
  chart_of_account_id Int
  cost_center_id      Int
  cost_center         cost_center      @relation(fields: [cost_center_id], references: [id])
  chart_of_account    chart_of_account @relation(fields: [chart_of_account_id], references: [id])
  //needs cost_center
  //needs chart_of_account
}

model company_address {
  id                      Int                @id @default(autoincrement())
  address1                String //only this required(from address data)
  address2                String?
  city                    String?
  state_or_province       String?
  zip_or_portal_code      String?
  phone                   String?
  fax                     String?
  website                 String?
  organization_profile_id Int
  organization_profile    financial_settings @relation(fields: [organization_profile_id], references: [id])
  //needs financial_settings
}

model associated_tax_group {
  id           Int       @id @default(autoincrement())
  tax_id       Int
  tax_group_id Int
  tax          tax       @relation(fields: [tax_id], references: [id])
  tax_group    tax_group @relation(fields: [tax_group_id], references: [id])
}

model tax {
  id                         Int              @id @default(autoincrement())
  tax_name                   String
  tax_percentage             Float
  is_value_added             Boolean
  is_editable                Boolean
  is_default_tax             Boolean
  tax_type                   Int //[tax,compound_tax]
  chart_of_account_debit_id  Int
  chart_of_account_credit_id Int
  tax_authority_id           Int
  tax_authority              tax_authority    @relation(fields: [tax_authority_id], references: [id])
  chart_of_account_debit     chart_of_account @relation(name: "chart_of_account_debit", fields: [chart_of_account_debit_id], references: [id])
  chart_of_account_credit    chart_of_account @relation(name: "chart_of_account_credit", fields: [chart_of_account_credit_id], references: [id])

  //needs tax_authority
  //needs chart_of_account
  associated_tax_group associated_tax_group[]
  tax_chart_of_account tax_chart_of_account[]
  tax_rule             tax_rule[]
}

model tax_chart_of_account {
  id                  Int              @id @default(autoincrement())
  tax_id              Int
  chart_of_account_id Int
  tax                 tax              @relation(fields: [tax_id], references: [id])
  chart_of_account    chart_of_account @relation(fields: [chart_of_account_id], references: [id])
  //needs tax
  //needs chart_of_account
}

model tax_rule {
  id         Int    @id @default(autoincrement())
  operator   Int //[greater_than,less_than,equals_to,greater_than_or_equals_to,less_than_equals_to]
  amount     Float
  remark     String
  sales_type Int //[product,service]
  tax_id     Int
  tax        tax    @relation(fields: [tax_id], references: [id])

  //needs tax
}
